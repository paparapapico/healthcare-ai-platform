# Docker Compose Configuration
# 파일 위치: HealthcareAI/docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthcare_db
    environment:
      POSTGRES_USER: healthcare_user
      POSTGRES_PASSWORD: healthcare_pass
      POSTGRES_DB: healthcare_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: healthcare_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    container_name: healthcare_backend
    environment:
      DATABASE_URL: postgresql://healthcare_user:healthcare_pass@postgres:5432/healthcare_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SENTRY_DSN: ${SENTRY_DSN:-}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: healthcare_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - healthcare_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - healthcare_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: healthcare_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - healthcare_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery_worker:
    build: ./backend
    container_name: healthcare_celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://healthcare_user:healthcare_pass@postgres:5432/healthcare_db
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - healthcare_network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build: ./backend
    container_name: healthcare_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://healthcare_user:healthcare_pass@postgres:5432/healthcare_db
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - healthcare_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  healthcare_network:
    driver: bridge